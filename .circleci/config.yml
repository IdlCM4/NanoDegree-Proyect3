version: 2.1
orbs:
  slack: circleci/slack@4.12.5

parameters:
  workflow_id:
    type: string
    default: '${CIRCLE_WORKFLOW_ID:0:7}'

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: '${CIRCLE_WORKFLOW_ID:0:7}'
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "destroy-environment"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string   
        default: '${CIRCLE_WORKFLOW_ID:0:7}'   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migration:revert
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1    

  test-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1
                
  test-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1
            
  scan-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            ## if the "npm autit fix" command above could not fix all critical vulnerabilities, try "npm audit fix --force" again
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1

  scan-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            ## if the "npm autit fix" command above could not fix all critical vulnerabilities, try "npm audit fix --force" again
            npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          environment:
            AWS_CLI_STR_ACCESS_KEY: $AWS_ACCESS_KEY_ID
            AWS_CLI_STR_PROFILE_NAME: $AWS_SECRET_ACCESS_KEY
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-<<pipeline.parameters.workflow_id>> \
              --region us-east-1 \
              --parameter-overrides ID=<<pipeline.parameters.workflow_id>>  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --region us-east-1 \
              --stack-name udapeople-frontend-<<pipeline.parameters.workflow_id>> \
              --parameter-overrides ID=<<pipeline.parameters.workflow_id>> 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            public_ip=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name, Values=udapeople-backend-<<pipeline.parameters.workflow_id>>" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --region us-east-1 )
            echo $public_ip >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - '82:66:86:8e:b3:67:f0:7c:fb:d4:31:85:81:2b:1e:d7:d6:8d:71:e3'
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            cat .circleci/ansible/inventory.txt
      - run:
          name: Configure server
          command: |         
            cd .circleci/ansible 
            ansible-playbook -i inventory.txt configure-server.yml
        

  run-migrations:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run: 
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -qq awscliv2.zip
            sudo ./aws/install
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            ## Run and save the migration output
            npm run migrations >> migrations.txt
            cat migrations.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "suchas been executed successfully" ~/project/backend/migrations.txt
            then
              curl --insecure https://kvdb.io/KihVAzcKQYJh1jSzR8GJww/migration_<<pipeline.parameters.workflow_id>> -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}. 
      - slack/notify:
          channel: fail
          event: fail
          template: basic_fail_1
      - slack/notify:
          channel: success
          event: pass
          template: basic_success_1    

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm 
            apk add python3 py3-pip 
            pip3 install awscli --upgrade 
      - run:
          name: Get backend url
          environment:
            AWS_CLI_STR_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
            AWS_CLI_STR_PROFILE_NAME: $AWS_SECRET_ACCESS_KEY
          command: |
            export public_ip=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-<<pipeline.parameters.workflow_id>>" \
            --query "Reservations[0].Instances[0].PublicIpAddress")
            export API_URL="http://${public_ip}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${public_ip}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install 
            npm run build 
            tar -czvf artifact-"<<pipeline.parameters.workflow_id>>".tar.gz dist
            aws s3 cp dist s3://udapeople-<<pipeline.parameters.workflow_id>> --recursive
      - destroy-environment:
          workflow_id: <<pipeline.parameters.workflow_id>>
      - revert-migrations:
          workflow_id: <<pipeline.parameters.workflow_id>>
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
    # docker:
    #   # Docker image here
    # steps:
    #   # Checkout code from git
    #   - run:
    #       name: Get old stack workflow id
    #       command: |
    #         # your code here
    #         export OldWorkflowID="the id here"
    #         export STACKS=[] #put the list of stacks here
    #   - run:
    #       name: Remove old stacks and files
    #       command: |
    #         if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
    #         then
    #           # your code here
    #         fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - test-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets
      - scan-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
          context: slack-secrets
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]

      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]